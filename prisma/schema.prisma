// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  email         String    @unique
  password      String
  firstName     String
  lastName      String
  isAuthorized  Boolean   @default(false)
  accessUntil   DateTime? // Opcional: fecha de expiración
  userProgress  UserProgress[]
  wrongAnswers  WrongAnswer[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  createdQuizzes Quiz[]   @relation("CreatedQuizzes")
}

model UserProgress {
  id              Int       @id @default(autoincrement())
  userId          Int
  quizId          Int
  currentQuestion Int       @default(0)
  correctAnswers  Int       @default(0)
  incorrectAnswers Int      @default(0)
  startedAt       DateTime  @default(now())
  lastAccess      DateTime  @updatedAt
  isFinished      Boolean   @default(false)
  user            User      @relation(fields: [userId], references: [id])
  quiz            Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  @@unique([userId, quizId])
}

model Quiz {
  id          Int        @id @default(autoincrement())
  title       String
  questions   Question[]
  userProgress  UserProgress[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  wrongAnswers WrongAnswer[]

  creatorId   Int
  creator     User       @relation(fields: [creatorId], references: [id], name: "CreatedQuizzes")
}

model Question {
  id          Int      @id @default(autoincrement())
  quizId      Int
  text        String
  explanation String?
  options     Option[]
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  wrongAnswers WrongAnswer[]
}

model Option {
  id          Int      @id @default(autoincrement())
  questionId  Int
  text        String
  isCorrect   Boolean
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model WrongAnswer {
  id          Int      @id @default(autoincrement())
  userId      Int
  quizId      Int
  questionId  Int
  createdAt   DateTime @default(now())
  
  // Relaciones
  user        User     @relation(fields: [userId], references: [id])
  quiz        Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question    Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@index([userId, quizId]) // Índice para búsquedas eficientes
}